{"version":3,"sources":["UserData.js","Tables.js","User.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["data","Tables","userInfo","formatDate","date","ye","Intl","DateTimeFormat","year","format","month","day","toLocaleString","hour","minute","hour12","useState","Date","selectedEndDate","setSelectedEndDate","selectedStartDate","setSelectedStartDate","show","setShow","showFilteredData","activity_periods","filter","time","t","split","length","pop","join","dateSplit","start_time","st","slice","et","console","log","moment","isSame","isBetween","className","utils","DateFnsUtils","Grid","container","justify","margin","id","label","value","onChange","startDate","formattedDate","KeyboardButtonProps","EndDate","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","fontWeight","TableBody","map","i","key","scope","end_time","User","user","open","setOpen","setUserInfo","List","ListItem","button","alignItems","onClick","users","ListItemAvatar","Avatar","alt","real_name","src","ListItemText","primary","secondary","Typography","variant","color","tz","Divider","Modal","onClose","Fade","in","Users","members","App","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAAaA,EAAO,CAChB,IAAM,EACN,QAAW,CAAC,CACR,GAAM,YACN,UAAa,gBACb,GAAM,sBACN,iBAAoB,CAAC,CACjB,WAAc,qBACd,SAAY,qBAEhB,CACI,WAAc,sBACd,SAAY,qBAEhB,CACI,WAAc,sBACd,SAAY,wBAIpB,CACI,GAAM,YACN,UAAa,mBACb,GAAM,eACN,iBAAoB,CAAC,CACjB,WAAc,qBACd,SAAY,qBAEhB,CACI,WAAc,sBACd,SAAY,qBAEhB,CACI,WAAc,sBACd,SAAY,0B,gNC0FTC,MA3Gf,YAA+B,IAAbC,EAAY,EAAZA,SAERC,EAAa,SAACC,GAChB,IAAMC,EAAK,IAAIC,KAAKC,eAAe,KAAM,CAAEC,KAAM,YAAaC,OAAOL,GAKrE,OAJW,IAAIE,KAAKC,eAAe,KAAM,CAAEG,MAAO,UAAWD,OAAOL,GAGhD,IAFT,IAAIE,KAAKC,eAAe,KAAM,CAAEI,IAAK,YAAaF,OAAOL,GAErC,IAAMC,EAAK,IAD7BD,EAAKQ,eAAe,QAAS,CAAEC,KAAM,UAAWC,OAAQ,UAAWC,QAAQ,KANlE,EAUoBC,mBAASb,EAAW,IAAIc,OAV5C,mBAUnBC,EAVmB,KAUFC,EAVE,OAWwBH,mBAASb,EAAW,IAAIc,OAXhD,mBAWnBG,EAXmB,KAWAC,EAXA,OAYFL,oBAAS,GAZP,mBAYnBM,EAZmB,KAYbC,EAZa,KAgCtBC,EAAmBtB,EAASuB,iBAAiBC,QAAO,SAACC,GACrD,IAAMC,EAlBQ,SAACxB,GACf,IAAMwB,EAAIxB,EAAKyB,MAAM,KAGrB,OAFAD,EAAE,GAAqB,IAAhBA,EAAE,GAAGE,OAAe,IAAMF,EAAE,GAAKA,EAAE,GAC1CA,EAAEG,MACKH,EAAEI,KAAK,KAcJC,CAAUN,EAAKO,YACnBC,EAAKf,EAAkBS,MAAM,KAAKO,MAAM,EAAG,GAAGJ,KAAK,KACnDK,EAAKnB,EAAgBW,MAAM,KAAKO,MAAM,EAAG,GAAGJ,KAAK,KAEvD,OADAM,QAAQC,IAAIX,EAAI,IAAMO,EAAK,IAAME,GAC1BG,IAAOZ,GAAGa,OAAON,IAAOK,IAAOZ,GAAGc,UAAUP,EAAIE,MAE3D,OACI,6BACI,yBAAKM,UAAU,eACX,kBAAC,IAAD,CAAyBC,MAAOC,KAC5B,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,gBACpB,kBAAC,IAAD,CACIC,OAAO,SACPxC,OAAO,cACPyC,GAAG,0BACHC,MAAM,oBACNC,MAAOhC,EACPiC,SA7BM,SAACC,GAC3B,IAAMC,EAAgBpD,EAAWmD,GACjCjC,EAAqBkC,GACrBhC,GAAQ,IA2BYiC,oBAAqB,CACjB,aAAc,iBAGtB,kBAAC,IAAD,CACIP,OAAO,SACPxC,OAAO,cACPyC,GAAG,wBACHC,MAAM,kBACNC,MAAOlC,EACPmC,SAlCI,SAACI,GACzB,IAAMF,EAAgBpD,EAAWsD,GACjCtC,EAAmBoC,GACnBhC,GAAQ,IAgCYiC,oBAAqB,CACjB,aAAc,mBAK9B,yBAAKb,UAAU,SACX,kBAACe,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACC,EAAA,EAAD,CAAOlB,UAAU,QAAQmB,aAAW,gBAChC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,MAAM,OAAOC,WAAW,QAAnC,cACA,kBAACF,EAAA,EAAD,CAAWC,MAAM,OAAOC,WAAW,QAAnC,cAGR,kBAACC,EAAA,EAAD,KAEQ9C,EACIE,EAAiB6C,KAAI,SAAC1C,EAAM2C,GAAP,OACjB,kBAACN,EAAA,EAAD,CAAUO,IAAK5C,EAAKO,WAAaoC,GAC7B,kBAACL,EAAA,EAAD,CAAWN,UAAU,KAAKa,MAAM,OAC3B7C,EAAKO,YAEV,kBAAC+B,EAAA,EAAD,CAAWC,MAAM,QAAQvC,EAAK8C,cAEjCvE,EAASuB,iBAAiB4C,KAAI,SAAC1C,EAAM2C,GAAP,OAC/B,kBAACN,EAAA,EAAD,CAAUO,IAAK5C,EAAKO,WAAaoC,GAC7B,kBAACL,EAAA,EAAD,CAAWN,UAAU,KAAKa,MAAM,OAC3B7C,EAAKO,YAEV,kBAAC+B,EAAA,EAAD,CAAWC,MAAM,QAAQvC,EAAK8C,qB,MCnD/DC,MA7Cf,YAAyB,IAATC,EAAQ,EAARA,KAAQ,EACI3D,oBAAS,GADb,mBACb4D,EADa,KACPC,EADO,OAEY7D,qBAFZ,mBAEbd,EAFa,KAEH4E,EAFG,KAUpB,OACI,yBAAKnC,UAAU,QACX,kBAACoC,EAAA,EAAD,CAAMpC,UAAU,eACZ,kBAACqC,EAAA,EAAD,CAAUC,QAAM,EAACtC,UAAU,kBAAkBuC,WAAW,aAAaC,QAAS,kBAPtEC,EAOuFT,EANvGE,GAAQ,GACDC,EAAYM,GAFJ,IAACA,IAQJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,IAAKZ,EAAKa,UAAWC,IAAI,iCAErC,kBAACC,EAAA,EAAD,CACIC,QAAShB,EAAKa,UACdI,UACI,kBAACC,EAAA,EAAD,CACIlC,UAAU,OACVmC,QAAQ,QACRnD,UAAU,cACVoD,MAAM,eAELpB,EAAKqB,OAKtB,kBAACC,EAAA,EAAD,CAASH,QAAQ,QAAQnC,UAAU,QAEvC,yBAAKhB,UAAU,aACX,kBAACuD,EAAA,EAAD,CAAOvD,UAAU,QAAQiC,KAAMA,EAC3BuB,QAhCI,WAChBtB,GAAQ,KAgCI,kBAACuB,EAAA,EAAD,CAAMC,GAAIzB,GACN,kBAAC,EAAD,CAAQ1E,SAAUA,S,MCjC3BoG,MAZf,WACI,OACI,yBAAK3D,UAAU,SACV3C,EAAKuG,QAAQlC,KAAI,SAACM,GAAD,OACd,kBAAC,EAAD,CAAMJ,IAAKI,EAAKzB,GAAIyB,KAAMA,SCU3B6B,MAdf,WACE,OACE,yBAAK7D,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CAAe8D,SAAS,QAAQ9D,UAAU,eAC1C,wBAAIA,UAAU,SAAd,sBAEF,kBAAC,EAAD,SCDY+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpF,QAAQoF,MAAMA,EAAMC,c","file":"static/js/main.98465f80.chunk.js","sourcesContent":["export const data = {\r\n    \"ok\": true,\r\n    \"members\": [{\r\n        \"id\": \"W012A3CDE\",\r\n        \"real_name\": \"Egon Spengler\",\r\n        \"tz\": \"America/Los_Angeles\",\r\n        \"activity_periods\": [{\r\n            \"start_time\": \"Feb 1 2020  1:33PM\",\r\n            \"end_time\": \"Feb 1 2020 1:54PM\"\r\n        },\r\n        {\r\n            \"start_time\": \"Mar 1 2020  11:11AM\",\r\n            \"end_time\": \"Mar 1 2020 2:00PM\"\r\n        },\r\n        {\r\n            \"start_time\": \"Mar 16 2020  5:33PM\",\r\n            \"end_time\": \"Mar 16 2020 8:03PM\"\r\n        }\r\n        ]\r\n    },\r\n    {\r\n        \"id\": \"W07QCRPA4\",\r\n        \"real_name\": \"Glinda Southgood\",\r\n        \"tz\": \"Asia/Kolkata\",\r\n        \"activity_periods\": [{\r\n            \"start_time\": \"Feb 1 2020  1:33PM\",\r\n            \"end_time\": \"Feb 1 2020 1:54PM\"\r\n        },\r\n        {\r\n            \"start_time\": \"Mar 1 2020  11:11AM\",\r\n            \"end_time\": \"Mar 1 2020 2:00PM\"\r\n        },\r\n        {\r\n            \"start_time\": \"Mar 16 2020  5:33PM\",\r\n            \"end_time\": \"Mar 16 2020 8:02PM\"\r\n        }\r\n        ]\r\n    }\r\n    ]\r\n};\r\n\r\n","import React, { useState } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport moment from 'moment';\r\nimport './Table.css';\r\n\r\nfunction Tables({ userInfo }) {\r\n\r\n    const formatDate = (date) => {\r\n        const ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(date);\r\n        const mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(date);\r\n        const da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(date);\r\n        const time = date.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\r\n        const format = mo + ' ' + da + ' ' + ye + ' ' + time;\r\n        return format;\r\n    }\r\n    const [selectedEndDate, setSelectedEndDate] = useState(formatDate(new Date()));\r\n    const [selectedStartDate, setSelectedStartDate] = useState(formatDate(new Date()));\r\n    const [show, setShow] = useState(false);\r\n\r\n\r\n    const dateSplit = (date) => {\r\n        const t = date.split(' ');\r\n        t[1] = t[1].length === 1 ? '0' + t[1] : t[1];\r\n        t.pop();\r\n        return t.join(' ');\r\n    }\r\n    const handleStartDateChange = (startDate) => {\r\n        const formattedDate = formatDate(startDate);\r\n        setSelectedStartDate(formattedDate);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleEndDateChange = (EndDate) => {\r\n        const formattedDate = formatDate(EndDate);\r\n        setSelectedEndDate(formattedDate);\r\n        setShow(true);\r\n    };\r\n    let showFilteredData = userInfo.activity_periods.filter((time) => {\r\n        const t = dateSplit(time.start_time);\r\n        const st = selectedStartDate.split(' ').slice(0, 3).join(' ');\r\n        const et = selectedEndDate.split(' ').slice(0, 3).join(' ');\r\n        console.log(t + \" \" + st + \" \" + et);\r\n        return moment(t).isSame(st) || moment(t).isBetween(st, et);\r\n    });\r\n    return (\r\n        <div>\r\n            <div className=\"modal__fade\">\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <Grid container justify=\"space-around\">\r\n                        <KeyboardDatePicker\r\n                            margin=\"normal\"\r\n                            format='MMM dd yyyy'\r\n                            id=\"startDate-picker-dialog\"\r\n                            label=\"Select Start Date\"\r\n                            value={selectedStartDate}\r\n                            onChange={handleStartDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                        <KeyboardDatePicker\r\n                            margin=\"normal\"\r\n                            format='MMM dd yyyy'\r\n                            id=\"endDate-picker-dialog\"\r\n                            label=\"Select End Date\"\r\n                            value={selectedEndDate}\r\n                            onChange={handleEndDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </MuiPickersUtilsProvider>\r\n                <div className=\"table\">\r\n                    <TableContainer component={Paper}>\r\n                        <Table className=\"table\" aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell align=\"left\" fontWeight=\"bold\">Start Time</TableCell>\r\n                                    <TableCell align=\"left\" fontWeight=\"bold\">End Time</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    show ?\r\n                                        showFilteredData.map((time, i) => (\r\n                                            <TableRow key={time.start_time + i}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {time.start_time}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">{time.end_time}</TableCell>\r\n                                            </TableRow>\r\n                                        )) : userInfo.activity_periods.map((time, i) => (\r\n                                            <TableRow key={time.start_time + i}>\r\n                                                <TableCell component=\"th\" scope=\"row\">\r\n                                                    {time.start_time}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">{time.end_time}</TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                }\r\n\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </div>\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default Tables;\r\n","import React, { useState } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Tables from './Tables';\r\nimport './User.css';\r\n\r\nfunction User({ user }) {\r\n    const [open, setOpen] = useState(false);\r\n    const [userInfo, setUserInfo] = useState();\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleOpen = (users) => {\r\n        setOpen(true);\r\n        return setUserInfo(users);\r\n    };\r\n    return (\r\n        <div className=\"user\">\r\n            <List className=\"users__list\">\r\n                <ListItem button className=\"users__listitem\" alignItems=\"flex-start\" onClick={() => handleOpen(user)}>\r\n                    <ListItemAvatar>\r\n                        <Avatar alt={user.real_name} src=\"/static/images/avatar/1.jpg\" />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={user.real_name}\r\n                        secondary={\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                className=\"users__name\"\r\n                                color=\"textPrimary\"\r\n                            >\r\n                                {user.tz}\r\n                            </Typography>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\" />\r\n            </List>\r\n            <div className=\"modalOpen\">\r\n                <Modal className=\"modal\" open={open}\r\n                    onClose={handleClose}>\r\n                    <Fade in={open}>\r\n                        <Tables userInfo={userInfo} />\r\n                    </Fade>\r\n                </Modal>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport { data } from './UserData';\r\nimport User from './User';\r\nimport './Users.css';\r\n\r\nfunction Users() {\r\n    return (\r\n        <div className=\"users\">\r\n            {data.members.map((user) => (\r\n                <User key={user.id} user={user} />\r\n            ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from 'react';\nimport './App.css';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport Users from './Users';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <div className=\"header\">\n          <PeopleAltIcon fontSize=\"large\" className=\"users-icon\" />\n          <h1 className=\"title\">Users Information</h1>\n        </div>\n        <Users />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}